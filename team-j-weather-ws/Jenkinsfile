def gate = ""
pipeline{
    agent any
    tools {
        jdk 'LOCAL_JDK11'
    }
    options {
        disableConcurrentBuilds()
        timeout(time: 1, unit: "HOURS")
    }
    stages {
        stage("Compile") {
            steps {
                echo "Compile WebService"
                sh "chmod +x ./mvnw"
                sh "./mvnw clean compile -DskipTests"
            }
        }
        stage("Test") {
            steps {
                echo "Test WebService"
                // no test for now
                // sh "./mvnw test"
            }
        }
        stage('Sonarqube') {
            steps {
                withSonarQubeEnv('Sonarqube_env') {
                    echo 'Sonar Analysis'
                    sh './mvnw sonar:sonar -Dsonar.pitest.mode=reuseReport'
                }
            }
        }
        stage('Quality Gate') {
            steps {
                catchError(buildResult: "SUCCESS", stageResult: "FAILURE") {
                    timeout(time: 1, unit: "HOURS") {
                        waitForQualityGate true
                    }
                }
            }
            post{
                success {
                    script {
                        gate = "\n - Quality gate was successful"
                    }
                }
                failure {
                    script {
                        gate = "\n - Quality gate was failed"
                    }
                }
            }
        }
    }
    post{
        success {
            slackSend(
            channel: 'soa-team-j-status',
            notifyCommitters: true,
            failOnError: true,
            color: 'good',
            token: env.SLACK_TOKEN,
            message: 'Job: ' + env.JOB_NAME + ' with buildnumber ' + env.BUILD_NUMBER + ' was successful' + gate,
            baseUrl: env.SLACK_WEBHOOK)
            echo "======== pipeline executed successfully ========"
        }
        failure {
            slackSend(
            channel: 'soa-team-j-status',
            notifyCommitters: true,
            failOnError: true,
            color: 'danger',
            token: env.SLACK_TOKEN,
            message: 'Job: ' + env.JOB_NAME + ' with buildnumber ' + env.BUILD_NUMBER + ' was failed' + gate,
            baseUrl: env.SLACK_WEBHOOK)
            echo "======== pipeline execution failed========"
        }
    }
}
